require("dotenv").config();
const axios = require("axios");
const cheerio = require("cheerio");

const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME;
const KEYWORDS = process.env.KEYWORD.split(",");
const CHECK_INTERVAL = process.env.CHECK_INTERVAL || 10000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const USER_IDS = process.env.USER_IDS.split(",");

// –ó–∞–≥—Ä—É–∂–∞–µ–º lastMessageId –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
let lastMessageId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function checkChannelMessages() {
  try {
    const url = `https://t.me/s/${CHANNEL_USERNAME}`;
    const response = await axios.get(url);

    // –ü–∞—Ä—Å–∏–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const $ = cheerio.load(response.data);
    const messages = [];

    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    $(".tgme_widget_message").each((i, element) => {
      const messageId = $(element).attr("data-post");
      const messageText = $(element)
        .find(".tgme_widget_message_text")
        .text()
        .trim();
      const messageDate = $(element)
        .find(".tgme_widget_message_date time")
        .attr("datetime"); // –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–∞—Ç—É –≤ –º–∞—Å—Å–∏–≤
      messages.push({ messageId, messageText, messageDate });
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let newLastMessageId = messages[messages.length - 1].messageId;

    for (const message of messages.reverse()) {
      if (message.messageId === lastMessageId) break;

      console.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.messageText}`);
      const containsKeyword = KEYWORDS.some((keyword) => {
        if (message.messageText.toLowerCase().includes(keyword)) {
          console.log(`üîî –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: "${keyword}"`);
          return true;
        }
        return false;
      });

      if (containsKeyword) {
        const formattedMessage = formatMessage(
          message.messageText,
          message.messageDate
        );
        notifyUsers(formattedMessage);
      }
    }

    // –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π lastMessageId
    if (newLastMessageId !== lastMessageId) {
      lastMessageId = newLastMessageId;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–∞:", error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–æ–π
function formatMessage(messageText, messageDate) {
  const date = new Date(messageDate); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
  const formattedDate = date.toLocaleString("ru-RU", {
    weekday: "long", // –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    year: "numeric", // –≥–æ–¥
    month: "long", // –º–µ—Å—è—Ü
    day: "numeric", // –¥–µ–Ω—å
    hour: "numeric", // —á–∞—Å—ã
    minute: "numeric", // –º–∏–Ω—É—Ç—ã
    second: "numeric", // —Å–µ–∫—É–Ω–¥—ã
  });

  return `${messageText}\n\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${formattedDate}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendMessage(userId, text) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

  try {
    await axios.post(url, {
      chat_id: userId,
      text: text,
    });
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
      error.response?.data || error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function notifyUsers(messageText) {
  for (const userId of USER_IDS) {
    await sendMessage(userId, messageText);
  }
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª
setInterval(checkChannelMessages, CHECK_INTERVAL);
